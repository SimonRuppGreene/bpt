diff --git a/bpt.c b/bpt.c
index 9449525..b720e27 100644
--- a/bpt.c
+++ b/bpt.c
@@ -1,5 +1,5 @@
 /*
- *  bpt.c  
+ *  bpt.c
  */
 #define Version "1.14"
 /*
@@ -10,30 +10,30 @@
  *  Redistribution and use in source and binary forms, with or without
  *  modification, are permitted provided that the following conditions are met:
  *
- *  1. Redistributions of source code must retain the above copyright notice, 
+ *  1. Redistributions of source code must retain the above copyright notice,
  *  this list of conditions and the following disclaimer.
  *
- *  2. Redistributions in binary form must reproduce the above copyright notice, 
- *  this list of conditions and the following disclaimer in the documentation 
+ *  2. Redistributions in binary form must reproduce the above copyright notice,
+ *  this list of conditions and the following disclaimer in the documentation
  *  and/or other materials provided with the distribution.
- 
- *  3. Neither the name of the copyright holder nor the names of its 
- *  contributors may be used to endorse or promote products derived from this 
+
+ *  3. Neither the name of the copyright holder nor the names of its
+ *  contributors may be used to endorse or promote products derived from this
  *  software without specific prior written permission.
- 
+
  *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
- *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
- *  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
- *  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE 
- *  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
- *  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF 
- *  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
- *  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
- *  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
- *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE 
+ *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+ *  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ *  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
+ *  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+ *  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+ *  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+ *  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+ *  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  *  POSSIBILITY OF SUCH DAMAGE.
- 
- *  Author:  Amittai Aviram 
+
+ *  Author:  Amittai Aviram
  *    http://www.amittai.com
  *    amittai.aviram@gmail.edu or afa13@columbia.edu
  *  Original Date:  26 June 2010
@@ -42,7 +42,7 @@
  *  This implementation demonstrates the B+ tree data structure
  *  for educational purposes, includin insertion, deletion, search, and display
  *  of the search path, the leaves, or the whole tree.
- *  
+ *
  *  Must be compiled with a C99-compliant C compiler such as the latest GCC.
  *
  *  Usage:  bpt [order]
@@ -179,10 +179,10 @@ int height( node * root );
 int path_to_root( node * root, node * child );
 void print_leaves( node * root );
 void print_tree( node * root );
-void find_and_print(node * root, int key, bool verbose); 
-void find_and_print_range(node * root, int range1, int range2, bool verbose); 
+void find_and_print(node * root, int key, bool verbose);
+void find_and_print_range(node * root, int range1, int range2, bool verbose);
 int find_range( node * root, int key_start, int key_end, bool verbose,
-		int returned_keys[], void * returned_pointers[]); 
+		int returned_keys[], void * returned_pointers[]);
 node * find_leaf( node * root, int key, bool verbose );
 record * find( node * root, int key, bool verbose );
 int cut( int length );
@@ -196,7 +196,7 @@ int get_left_index(node * parent, node * left);
 node * insert_into_leaf( node * leaf, int key, record * pointer );
 node * insert_into_leaf_after_splitting(node * root, node * leaf, int key,
                                         record * pointer);
-node * insert_into_node(node * root, node * parent, 
+node * insert_into_node(node * root, node * parent,
 		int left_index, int key, node * right);
 node * insert_into_node_after_splitting(node * root, node * parent,
                                         int left_index,
@@ -225,7 +225,7 @@ node * delete( node * root, int key );
 
 // OUTPUT AND UTILITIES
 
-/* Copyright and license notice to user at startup. 
+/* Copyright and license notice to user at startup.
  */
 void license_notice( void ) {
 	printf("bpt version %s -- Copyright (C) 2010  Amittai Aviram "
@@ -411,7 +411,7 @@ int path_to_root( node * root, node * child ) {
 
 
 /* Prints the B+ tree in the command
- * line in level (rank) order, with the 
+ * line in level (rank) order, with the
  * keys in each node and the '|' symbol
  * to separate nodes.
  * With the verbose_output flag set.
@@ -441,18 +441,22 @@ void print_tree( node * root ) {
 				printf("\n");
 			}
 		}
-		if (verbose_output) 
+		if (verbose_output)
 			printf("(%lx)", (unsigned long)n);
 		for (i = 0; i < n->num_keys; i++) {
 			if (verbose_output)
 				printf("%lx ", (unsigned long)n->pointers[i]);
 			printf("%d ", n->keys[i]);
 		}
-		if (!n->is_leaf)
-			for (i = 0; i <= n->num_keys; i++)
+
+		if (!n->is_leaf) {
+			for (i = 0; i <= n->num_keys; i++) {
 				enqueue(n->pointers[i]);
+			}
+		}
+
 		if (verbose_output) {
-			if (n->is_leaf) 
+			if (n->is_leaf)
 				printf("%lx ", (unsigned long)n->pointers[order - 1]);
 			else
 				printf("%lx ", (unsigned long)n->pointers[n->num_keys]);
@@ -470,7 +474,7 @@ void find_and_print(node * root, int key, bool verbose) {
 	record * r = find(root, key, verbose);
 	if (r == NULL)
 		printf("Record not found under key %d.\n", key);
-	else 
+	else
 		printf("Record at %lx -- key %d, value %d.\n",
 				(unsigned long)r, key, r->value);
 }
@@ -535,7 +539,7 @@ node * find_leaf( node * root, int key, bool verbose ) {
 	int i = 0;
 	node * c = root;
 	if (c == NULL) {
-		if (verbose) 
+		if (verbose)
 			printf("Empty tree.\n");
 		return c;
 	}
@@ -548,7 +552,8 @@ node * find_leaf( node * root, int key, bool verbose ) {
 		}
 		i = 0;
 		while (i < c->num_keys) {
-			if (key >= c->keys[i]) i++;
+			// if (key >= c->keys[i]) i++;
+			if (key <= c->keys[i]) i++;
 			else break;
 		}
 		if (verbose)
@@ -574,7 +579,7 @@ record * find( node * root, int key, bool verbose ) {
 	if (c == NULL) return NULL;
 	for (i = 0; i < c->num_keys; i++)
 		if (c->keys[i] == key) break;
-	if (i == c->num_keys) 
+	if (i == c->num_keys)
 		return NULL;
 	else
 		return (record *)c->pointers[i];
@@ -647,13 +652,13 @@ node * make_leaf( void ) {
 
 
 /* Helper function used in insert_into_parent
- * to find the index of the parent's pointer to 
+ * to find the index of the parent's pointer to
  * the node to the left of the key to be inserted.
  */
 int get_left_index(node * parent, node * left) {
 
 	int left_index = 0;
-	while (left_index <= parent->num_keys && 
+	while (left_index <= parent->num_keys &&
 			parent->pointers[left_index] != left)
 		left_index++;
 	return left_index;
@@ -668,13 +673,15 @@ node * insert_into_leaf( node * leaf, int key, record * pointer ) {
 	int i, insertion_point;
 
 	insertion_point = 0;
-	while (insertion_point < leaf->num_keys && leaf->keys[insertion_point] < key)
+	// while (insertion_point < leaf->num_keys && leaf->keys[insertion_point] < key)
+	while (insertion_point < leaf->num_keys && leaf->keys[insertion_point] > key)
 		insertion_point++;
 
 	for (i = leaf->num_keys; i > insertion_point; i--) {
 		leaf->keys[i] = leaf->keys[i - 1];
 		leaf->pointers[i] = leaf->pointers[i - 1];
 	}
+
 	leaf->keys[insertion_point] = key;
 	leaf->pointers[insertion_point] = pointer;
 	leaf->num_keys++;
@@ -709,11 +716,14 @@ node * insert_into_leaf_after_splitting(node * root, node * leaf, int key, recor
 	}
 
 	insertion_index = 0;
-	while (insertion_index < order - 1 && leaf->keys[insertion_index] < key)
+	// while (insertion_index < order - 1 && leaf->keys[insertion_index] < key)
+	while (insertion_index < order - 1 && leaf->keys[insertion_index] > key)
 		insertion_index++;
 
 	for (i = 0, j = 0; i < leaf->num_keys; i++, j++) {
-		if (j == insertion_index) j++;
+		if (j == insertion_index) { //triggers when between things
+			j++;
+		}
 		temp_keys[j] = leaf->keys[i];
 		temp_pointers[j] = leaf->pointers[i];
 	}
@@ -725,6 +735,7 @@ node * insert_into_leaf_after_splitting(node * root, node * leaf, int key, recor
 
 	split = cut(order - 1);
 
+	// might need to reverse this?
 	for (i = 0; i < split; i++) {
 		leaf->pointers[i] = temp_pointers[i];
 		leaf->keys[i] = temp_keys[i];
@@ -735,14 +746,16 @@ node * insert_into_leaf_after_splitting(node * root, node * leaf, int key, recor
 		new_leaf->pointers[j] = temp_pointers[i];
 		new_leaf->keys[j] = temp_keys[i];
 		new_leaf->num_keys++;
-	}
+	}
 
+	// clear temp
 	free(temp_pointers);
 	free(temp_keys);
 
-	new_leaf->pointers[order - 1] = leaf->pointers[order - 1];
-	leaf->pointers[order - 1] = new_leaf;
+	new_leaf->pointers[order - 1] = leaf->pointers[order - 1]; // new_leaf record 3 points to leaf record 3
+	leaf->pointers[order - 1] = new_leaf;					   // leaf record 3 points to new_leaf
 
+	// clear all data record pointers not associated with a record in leaf and new_leaf
 	for (i = leaf->num_keys; i < order - 1; i++)
 		leaf->pointers[i] = NULL;
 	for (i = new_leaf->num_keys; i < order - 1; i++)
@@ -759,7 +772,7 @@ node * insert_into_leaf_after_splitting(node * root, node * leaf, int key, recor
  * into a node into which these can fit
  * without violating the B+ tree properties.
  */
-node * insert_into_node(node * root, node * n, 
+node * insert_into_node(node * root, node * n,
 		int left_index, int key, node * right) {
 	int i;
 
@@ -778,7 +791,7 @@ node * insert_into_node(node * root, node * n,
  * into a node, causing the node's size to exceed
  * the order, and causing the node to split into two.
  */
-node * insert_into_node_after_splitting(node * root, node * old_node, int left_index, 
+node * insert_into_node_after_splitting(node * root, node * old_node, int left_index,
 		int key, node * right) {
 
 	int i, j, split, k_prime;
@@ -789,8 +802,8 @@ node * insert_into_node_after_splitting(node * root, node * old_node, int left_i
 	/* First create a temporary set of keys and pointers
 	 * to hold everything in order, including
 	 * the new key and pointer, inserted in their
-	 * correct places. 
-	 * Then create a new node and copy half of the 
+	 * correct places.
+	 * Then create a new node and copy half of the
 	 * keys and pointers to the old node and
 	 * the other half to the new.
 	 */
@@ -822,7 +835,7 @@ node * insert_into_node_after_splitting(node * root, node * old_node, int left_i
 	/* Create the new node and copy
 	 * half the keys and pointers to the
 	 * old and half to the new.
-	 */  
+	 */
 	split = cut(order);
 	new_node = make_node();
 	old_node->num_keys = 0;
@@ -873,23 +886,23 @@ node * insert_into_parent(node * root, node * left, int key, node * right) {
 		return insert_into_new_root(left, key, right);
 
 	/* Case: leaf or node. (Remainder of
-	 * function body.)  
+	 * function body.)
 	 */
 
-	/* Find the parent's pointer to the left 
+	/* Find the parent's pointer to the left
 	 * node.
 	 */
 
 	left_index = get_left_index(parent, left);
 
 
-	/* Simple case: the new key fits into the node. 
+	/* Simple case: the new key fits into the node.
 	 */
 
 	if (parent->num_keys < order - 1)
 		return insert_into_node(root, parent, left_index, key, right);
 
-	/* Harder case:  split a node in order 
+	/* Harder case:  split a node in order
 	 * to preserve the B+ tree properties.
 	 */
 
@@ -960,7 +973,7 @@ node * insert( node * root, int key, int value ) {
 	 * Start a new tree.
 	 */
 
-	if (root == NULL) 
+	if (root == NULL)
 		return start_new_tree(key, pointer);
 
 
@@ -1002,7 +1015,7 @@ int get_neighbor_index( node * n ) {
 
 	/* Return the index of the key to the left
 	 * of the pointer in the parent pointing
-	 * to n.  
+	 * to n.
 	 * If n is the leftmost child, this means
 	 * return -1.
 	 */
@@ -1066,10 +1079,10 @@ node * adjust_root(node * root) {
 	if (root->num_keys > 0)
 		return root;
 
-	/* Case: empty root. 
+	/* Case: empty root.
 	 */
 
-	// If it has a child, promote 
+	// If it has a child, promote
 	// the first (only) child
 	// as the new root.
 
@@ -1177,7 +1190,7 @@ node * coalesce_nodes(node * root, node * n, node * neighbor, int neighbor_index
 	root = delete_entry(root, n->parent, k_prime, n);
 	free(n->keys);
 	free(n->pointers);
-	free(n); 
+	free(n);
 	return root;
 }
 
@@ -1188,13 +1201,13 @@ node * coalesce_nodes(node * root, node * n, node * neighbor, int neighbor_index
  * small node's entries without exceeding the
  * maximum
  */
-node * redistribute_nodes(node * root, node * n, node * neighbor, int neighbor_index, 
-		int k_prime_index, int k_prime) {  
+node * redistribute_nodes(node * root, node * n, node * neighbor, int neighbor_index,
+		int k_prime_index, int k_prime) {
 
 	int i;
 	node * tmp;
 
-	/* Case: n has a neighbor to the left. 
+	/* Case: n has a neighbor to the left.
 	 * Pull the neighbor's last key-pointer pair over
 	 * from the neighbor's right end to n's left end.
 	 */
@@ -1228,7 +1241,7 @@ node * redistribute_nodes(node * root, node * n, node * neighbor, int neighbor_i
 	 * to n's rightmost position.
 	 */
 
-	else {  
+	else {
 		if (n->is_leaf) {
 			n->keys[n->num_keys] = neighbor->keys[0];
 			n->pointers[n->num_keys] = neighbor->pointers[0];
@@ -1277,10 +1290,10 @@ node * delete_entry( node * root, node * n, int key, void * pointer ) {
 
 	n = remove_entry_from_node(n, key, pointer);
 
-	/* Case:  deletion from the root. 
+	/* Case:  deletion from the root.
 	 */
 
-	if (n == root) 
+	if (n == root)
 		return adjust_root(root);
 
 
@@ -1316,7 +1329,7 @@ node * delete_entry( node * root, node * n, int key, void * pointer ) {
 	neighbor_index = get_neighbor_index( n );
 	k_prime_index = neighbor_index == -1 ? 0 : neighbor_index;
 	k_prime = n->parent->keys[k_prime_index];
-	neighbor = neighbor_index == -1 ? n->parent->pointers[1] : 
+	neighbor = neighbor_index == -1 ? n->parent->pointers[1] :
 		n->parent->pointers[neighbor_index];
 
 	capacity = n->is_leaf ? order : order - 1;
@@ -1395,7 +1408,7 @@ int main( int argc, char ** argv ) {
 	}
 
 	license_notice();
-	usage_1();  
+	usage_1();
 	usage_2();
 
 	if (argc > 2) {
@@ -1468,4 +1481,4 @@ int main( int argc, char ** argv ) {
 	printf("\n");
 
 	return EXIT_SUCCESS;
-}
\ No newline at end of file
+}
